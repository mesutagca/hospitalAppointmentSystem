<?php

namespace App\Exceptions;

use App\Enums\ExceptionMessages;
use App\Enums\ResponseCodes;

use App\Jobs\RequestExceptionLogJob;
use Illuminate\Auth\Access\AuthorizationException;
use Illuminate\Support\Facades\Auth;
use Symfony\Component\HttpKernel\Exception\MethodNotAllowedHttpException;
use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Throwable;
use Exception;
use function request;

class Handler extends ExceptionHandler
{
    /**
     * A list of the exception types that are not reported.
     *
     * @var array
     */
    protected $dontReport = [
        //
    ];

    /**
     * A list of the inputs that are never flashed for validation exceptions.
     *
     * @var array
     */
    protected $dontFlash = [
        'current_password',
        'password',
        'password_confirmation',
    ];

    /**
     * Register the exception handling callbacks for the application.
     *
     * @return void
     */
    public function register()
    {
//        $this->reportable(function (Throwable $e) {
//            //
//        });
    }

    public function report(Throwable $exception)
    {
        if (app()->bound('sentry') && $this->shouldReport($exception)) {
            app('sentry')->captureException($exception);
        }

        if (request()->header('Authorization') && !app()->runningInConsole() && $exception instanceof Exception) {
            if (!is_null(Auth::user())) {
                $profile = Auth::user()->toObject();
             //   $profile->token = request()->header('Authorization');
                RequestExceptionLogJob::dispatchNow($exception, request(), $profile);
            }
        }

        parent::report($exception);
    }

    public function render($request, Throwable $exception)
    {
        if ($exception  instanceof NotFoundHttpException) {
            abort(
                prepareCustomResponse(ExceptionMessages::ROUTE_NOT_FOUND, 404, ResponseCodes::ROUTE_NOT_FOUND)
            );
        }

        if ($exception instanceof MethodNotAllowedHttpException) {
            abort(
                prepareCustomResponse($exception->getMessage(), 405, ResponseCodes::METHOD_NOT_FOUND)
            );
        }

        if ($exception instanceof AuthorizationException) {
            abort(
                prepareCustomResponse($exception->getMessage(), 403, ResponseCodes::UNAUTHORIZED)
            );
        }


        return parent::render($request, $exception); // TODO: Change the autogenerated stub
    }
}
